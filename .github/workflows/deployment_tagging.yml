name: Deployment Version Tagger
run-name: ${{ github.actor }} is tagging ${{ github.ref }} for deployment.

on:
  workflow_call:
    inputs:
      dev-branch:
        description: 'The branch that feature changes are merged to and from where a release is cut. Default: `develop`.'
        type: string
        required: false
        default: 'develop'
      suffix:
        description: 'A suffix to add to the version tag in addition to the repo name, may be empty. Default: empty'
        type: string
        required: false
    outputs:
      version_value:
        description: 'Generated version tag.'
        value: ${{ jobs.Tag-Commit-Version.outputs.version_value }}

jobs:
  Tag-Commit-Version:
    name: Tag
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version_value: ${{ steps.calculate.outputs.version_value }}
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0
          fetch-tags: true
          sparse-checkout: |
            .gitignore
          
      - name: Calculate version tag
        id: calculate
        run: |
          REPO_NAME="${GITHUB_REPOSITORY#*/}"
          [ "$REPO_NAME" ] || { echo "No repository name ?!"; exit 1; }
          echo Repository name: $REPO_NAME
          
          BASE_SHA=$(git merge-base HEAD "$INPUT_DEV_BRANCH")
          [ "$BASE_SHA" ] || { echo "No merge base found!"; exit 1; }
          echo Merge base SHA: $BASE_SHA

          RELEASE_DATETIME=$(git log -1 --format=%cI "$BASE_SHA" 2>/dev/null)
          [ "$RELEASE_DATETIME" ] || { echo "No datetime found for the release!"; exit 1; }
          echo Commit date-time of merge base: $RELEASE_DATETIME

          RELEASE_DATE_UTC=$(date --utc --date="$RELEASE_DATETIME" +%Y-%m-%d 2>/dev/null | cut -d'T' -f1)
          [ "$RELEASE_DATE_UTC" ] || { echo "No UTC date found for the release!"; exit 1; }
          echo Commit date in UTC: $RELEASE_DATE_UTC

          CURRENT_PATCH=$(git tag --list "$RELEASE_DATE_UTC*" 2>/dev/null | sort | tail -n 1)
          echo Prior release on same day: $CURRENT_PATCH
          
          CURRENT_PATCH=$([[ "$CURRENT_PATCH" =~ -p([0-9]+)-.*$ ]] && echo "${BASH_REMATCH[1]}" || echo 0)
          NEXT_PATCH=$((CURRENT_PATCH + 1))
          SUFFIX=$([[ "$INPUT_SUFFIX" ]] && echo "-$INPUT_SUFFIX" )
          VERSION_VALUE=$RELEASE_DATE_UTC-p$NEXT_PATCH-$REPO_NAME$SUFFIX
          echo New version tag value: $VERSION_VALUE
          echo "version_value=$VERSION_VALUE" >> $GITHUB_OUTPUT

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "$VERSION_VALUE"
          git push origin tag "$VERSION_VALUE"
        env:
          INPUT_DEV_BRANCH: ${{ inputs.dev-branch }}
          INPUT_SUFFIX: ${{ inputs.suffix }}
